프로그램
   실행이 안된 상태.

프로세스
   실행된 프로그램.

쓰레드
   프로세스 내의 작업 처리 경로

   - 단일 쓰레드
      처리 경로를 한 개만 가지고 있기 때문에 직렬적이다.
      한 번에 하나씩 처리하기 때문에 상대적으로 비효율적이다.
      하지만 하나의 작업에 문제가 발생하더라도 다른 작업은 시작하지 않았기 때문에
      다른 작업에는 문제가 발생하지 않는다. 따라서 안정성이 보장되고 설계 시
      멀티 쓰레드에 비해 쉽다.

   - 멀티 쓰레드
      하나의 프로세스를 동시에 처리하는 것처럼 보이지만 사실은 매우 짧은 단위로 분할해서 차례로 처리한다.
      여러 개의 처리 경로를 가질 수 있도록 하며, 동시 작업이 가능해진다.
      설계하기 굉장히 어려우며, 하나의 쓰레드 문제 발생 시 모든 쓰레드에 문제가 발생하게 된다.
      멀티 쓰레드로 설계했다면, 처리량 증가, 효율성 증가, 처리비용 감소의 장점이 있기 때문에
      단점을 감수하고 설계하는 편이다.
------------------------------------------------------------------------------------------------------
멀티 쓰레드 구현 방법
   핵심: run() 메소드 재정의

   1. Thread 클래스 상속
   2. Runnable 인터페이스 지정
------------------------------------------------------------------------------------------------------
Thread 종료 방법
   1. 필드에 boolean 타입의 변수를 선언하고 run()안에 있는 반복문에 해당 변수가 true일 경우 break 하도록 설계한다.
   2. sleep() 또는 wait(), join() 등의 메소드를 통해 쓰레드 일시정지 상태일 경우
       Thread객체.interrupt()를 사용하여 InterruptedException을 발생시킨다.
       이 때 일시정지 시킨 메소드 부분의 catch를 통해 예외를 잡아주고 원하는 문장을 작성하면 된다.
   3. 쓰레드를 일시정지하는 코드가 없을 경우 Thread.interrupted()의 상태를 확인한다.
       Thread객체.interrupt() 사용 시 Thread.interrupted()의 상태는 true로 변경된다.
   4. System.exit(0)를 사용하면 전체 쓰레드 종료(프로세스 종료)
