추상 클래스와 인터페이스 간의 관계
	인터페이스를 클래스에 바로 지정하면 모든 메소드에 강제성이 부여되어서
	전부 다 구현해야한다. 하지만 일반적인 상황에서는 모든 것이 아닌, 
	필요한 메소드를 골라서 재정의해야한다.
	인터페이스를 직접 지정하지 않고 다른 클래스에 지정한 후 바디를 만들어 놓는다면,
	강제성이 소멸되고 이 클래스를 상속 받아서 필드를 구현한다면, 골라서 재정의 할 수 있게된다.
	이 때 중간에서 강제성을 없애주는 클래스를 추상 클래스로 선언하기로 하며,
	추상 클래스 이름 뒤에는 Adapter를 붙여서 목적을 알려준다.
======================================================================
마커 인터페이스(Marker Interface)
	클래스들을 그룹화하기 위한 목적으로 사용한다.
	인터페이스는 지정한 클래스의 부모이며, 모든 자식은 부모의 타입이므로
	마커 인터페이스를 지정받은 클래스들이 하나의 타입으로 묶이게 된다.
	이름 뒤에 Marker를 붙여줘야 한다.

======================================================================
내부 클래스(Inner Class) : 어떤 영역 안에 클래스가 선언되면 내부 클래스라고 한다.
	하나의 클래스에서 a 작업과 b 작업이 있을 때에는 따로 분리하여 클래스로 만들지 않고,
	클래스 안에 클래스를 선언하여 설계한다. 이 때 밖에 있는 클래스를 외부 클래스라고 하며,
	안에 선언된 클래스를 내부 클래스라고 한다. 외부 클래스가 메모리에 할당되어야
	내부 클래스를 객체화 할 수 있기 때문에 클래스를 숨기기 위해서 내부 클래스를 사용하기도 하며,
	이를 캡슐화 또는 은닉화라고 한다. 내부 클래스는 외부 클래스의 필드이기 때문에
	외부 클래스의 필드를 자신의 필드처럼 가져다 사용할 수 있지만 상속관계가 아니기 때문에
	내부 클래스 일지라도 extends를 통해 다른 클래스를 상속받아서 사용할 수 있다.

익명 클래스(Anonymous Inner Class)
	이름이 없는 클래스이며 구현 되지 않은 필드를 구현하기 위해서 일회성으로 생성되는 클래스이다.
	