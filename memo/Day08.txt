클래스
	공통요소를 한 번만 선언해놓고 가져다 사용만 하도록 설계한다.

	1. 타입이다
		클래스 안에 선언된 변수와 메소드를 사용하고 싶다면,
		해당 클래스 타입으로 변수를 선언해야 한다.
	2. 주어이다.

클래스 선언
	class 클래스명{
		필드(변수,메소드)
	}

클래스의 필드 사용
	1. 객체화(instance) : 객체(instance variable)를 만드는 작업, 추상적인 개념을 구체화시키는 작업
		클래스명 객체 = new 생성자(); -> 이것을 객체화 라고함
	
		.(마침표) : 하위연산자, 멤버변수 접근 연산자, 닷 연산자, 점 연산자
			 주소값 뒤에서만 사용이 가능하며, 해당 주소를 참조하는 명령어이다.
	
	2. static : 모든 객체가 공유해야하는 필드일 경우에 사용한다.
		클래스 하나 당 한 개만 생기기 때문에 객체로 접근하지 않고 클래스로 접근한다.
생성자

	클래스 이름 뒤에 소괄호가 있는 형태, 메소드와 기능이 똑같지만 메소드라고 부르지 않는다.
	생성자는 리턴이라는 기능이 존재하지 않기 때문이다.
	
	1. 해당 클래스의 필드를 메모리에 할당한 후 부여된 주소값을 가져온다.
	2. 초기화
	
기본 생성자
	매개변수가 없는 생성자이며, 클래스 선언 시 자동으로 선언된다.
	사용자가 직접 생성자를 선언하게 되면 기본 생성자는 없어진다.

this
	필드에 접근한 객체가 누구인지 알아야 해당 필드에 접근할 수 있다.
	이 때 접근한 객체가 가지고 있는 필드의 주소값을 this라는 변수에 자동으로 담긴다.
--------------------------------------------------------------------------------------------------
다형성
	1. 오버로딩(Overloading)
		매개변수의 개수 또는 타입이 다르면 동일한 이름의 메소드로 선언할 수 있다.
[클래스 실습]
	학생 클래스
		학생 번호
		국어 점수
		영어 점수
		수학 점수
	학생의 점수를 입력받은 뒤 총 점과 평균 출력	
===========================================
	상점 클래스
		상품명
		상품 가격
		재고
	손님 클래스
		이름
		휴대폰 번호
		통장 잔고
		할인율
	상점에서 상품 판매시 손님의 할인율을 적용하여 판매